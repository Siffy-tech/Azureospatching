name: Deploy to Azure VM - Staging

on:
  push:
    branches:
      - staging
  workflow_dispatch:

env:
  IMAGE_NAME: stagingapp

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry (ACR)
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image (latest + commit SHA)
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest \
                     -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Debug SSH Variables
      run: |
        echo "VM Host: ${{ secrets.AZURE_VM_HOST }}"
        echo "VM User: ${{ secrets.AZURE_VM_USERNAME }}"

    - name: Deploy to Azure VM via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AZURE_VM_HOST }}
        username: ${{ secrets.AZURE_VM_USERNAME }}
        key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
        script: |
          set -e
          IMAGE=${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}
          TAG_LATEST="${IMAGE}:latest"
          TAG_PREVIOUS="${IMAGE}:previous"
          TAG_BACKUP="${IMAGE}:backup-${{ github.run_id }}"

          echo "Logging into ACR on VM..."
          docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}

          echo "Backing up current :latest image..."
          if docker pull $TAG_LATEST; then
            docker tag $TAG_LATEST $TAG_PREVIOUS
            docker tag $TAG_LATEST $TAG_BACKUP
            docker push $TAG_PREVIOUS
            docker push $TAG_BACKUP
          else
            echo "No current image found for backup. Skipping backup."
          fi

          echo "Pulling :latest image..."
          docker pull $TAG_LATEST

          echo "Stopping and removing existing container if running..."
          docker stop stagingapp || true
          docker rm stagingapp || true

          echo "Starting new container..."
          docker run -d --name stagingapp -p 8000:8000 $TAG_LATEST || {
            echo "Deployment failed. Attempting rollback to :previous..."

            docker stop stagingapp || true
            docker rm stagingapp || true

            echo "Starting container with :previous image..."
            docker run -d --name stagingapp -p 8000:8000 $TAG_PREVIOUS || {
              echo "ROLLBACK FAILED. Manual recovery required!"
              exit 1
            }

            echo "Rollback successful. Running previous version."
          }

          echo "Deployment completed successfully."

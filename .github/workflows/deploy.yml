name: Deploy to Azure VM - Staging

on:
  push:
    branches:
      - staging
  workflow_dispatch:

env:
  IMAGE_NAME: stagingapp

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry (ACR)
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build Docker Image with latest + commit SHA
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest \
                     -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

    - name: Push Docker Image (latest + commit SHA)
      run: |
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Deploy to Azure VM via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.AZURE_VM_HOST }}
        username: ${{ secrets.AZURE_VM_USERNAME }}
        key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
        script: |
          set -e
          IMAGE=${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}
          TAG_LATEST="$IMAGE:latest"
          TAG_PREVIOUS="$IMAGE:previous"
          TAG_BACKUP="$IMAGE:backup-${{ github.run_id }}"

          echo "Logging into ACR on VM..."
          docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}

          echo "Pulling updated :latest image..."
          docker pull $TAG_LATEST

          echo "Stopping and removing any existing container..."
          docker stop stagingapp || true
          docker rm -f stagingapp || true

          echo "Starting test container..."
          docker run --name stagingapp-test -d -p 8000:8000 $TAG_LATEST

          echo "Waiting for app to start..."
          sleep 10

          echo "Checking if container is running..."
          if docker inspect --format='{{.State.Running}}' stagingapp-test | grep true; then
            echo "Test passed. Proceeding with deployment."
            echo "Backing up current :latest image as :previous and :backup..."
            docker tag $TAG_LATEST $TAG_PREVIOUS
            docker tag $TAG_LATEST $TAG_BACKUP
            docker push $TAG_PREVIOUS
            docker push $TAG_BACKUP

            echo "Removing test container..."
            docker stop stagingapp-test
            docker rm -f stagingapp-test

            echo "Running production container..."
            docker run -d --name stagingapp -p 8000:8000 $TAG_LATEST

            echo "Deployment completed successfully."
          else
            echo "Test failed. Rolling back..."
            docker logs stagingapp-test
            docker stop stagingapp-test || true
            docker rm -f stagingapp-test || true

            echo "Starting previous image..."
            docker run -d --name stagingapp -p 8000:8000 $TAG_PREVIOUS
            docker logs stagingapp
            exit 1
          fi


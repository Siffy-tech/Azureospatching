- name: Deploy to Azure VM via SSH
  uses: appleboy/ssh-action@v1.0.3
  with:
    host: ${{ secrets.AZURE_VM_HOST }}
    username: ${{ secrets.AZURE_VM_USERNAME }}
    key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
    script: |
      set -e
      IMAGE=${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}
      TAG_LATEST="${IMAGE}:latest"
      TAG_PREVIOUS="${IMAGE}:previous"
      TAG_BACKUP="${IMAGE}:backup-${{ github.run_id }}"

      echo "Logging into ACR on VM..."
      docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}

      echo "Backing up current :latest image..."
      # Check if a :latest image exists locally *before* attempting to tag it
      LOCAL_LATEST_EXISTS=$(docker image inspect $TAG_LATEST 2>/dev/null | grep -c "Digest")
      if [ "$LOCAL_LATEST_EXISTS" -gt 0 ]; then
        echo "Local :latest image found. Backing up..."
        docker tag $TAG_LATEST $TAG_PREVIOUS
        docker tag $TAG_LATEST $TAG_BACKUP
        docker push $TAG_PREVIOUS
        docker push $TAG_BACKUP
      else
        echo "No local :latest image. Checking ACR for :latest..."
        # Check if :latest exists in ACR
        ACR_LATEST_EXISTS=$(docker manifest inspect $TAG_LATEST 2>/dev/null | grep -c "digest")
        if [ "$ACR_LATEST_EXISTS" -gt 0 ]; then
          echo ":latest image found in ACR.  Pulling and backing up..."
          docker pull $TAG_LATEST
          docker tag $TAG_LATEST $TAG_PREVIOUS
          docker tag $TAG_LATEST $TAG_BACKUP
          docker push $TAG_PREVIOUS
          docker push $TAG_BACKUP
        else
          echo "No :latest image found in ACR. Skipping backup."
        fi
      fi

      echo "Pulling updated :latest image..."
      docker pull $TAG_LATEST

      echo "Stopping and removing any existing container..."
      docker stop stagingapp || true
      docker rm -f stagingapp || true

      echo "Starting new container with :latest image..."
      docker run -d --name stagingapp -p 8000:8000 $TAG_LATEST
      DEPLOYMENT_STATUS=$? # Capture the exit code immediately

      if [ "$DEPLOYMENT_STATUS" -ne 0 ]; then
        echo "Deployment failed (exit code: $DEPLOYMENT_STATUS). Rolling back to :previous..."
        echo "Cleaning up failed container (if any)..."
        docker stop stagingapp || true
        docker rm -f stagingapp || true

        # Check if :previous tag exists *before* attempting to run it.
        PREVIOUS_EXISTS=$(docker image inspect $TAG_PREVIOUS 2>/dev/null | grep -c "Digest")
        if [ "$PREVIOUS_EXISTS" -gt 0 ]; then
          echo "Starting container with :previous image..."
          docker run -d --name stagingapp -p 8000:8000 $TAG_PREVIOUS
          ROLLBACK_STATUS=$? # Capture rollback status
          if [ "$ROLLBACK_STATUS" -ne 0 ]; then
            echo "ROLLBACK FAILED (exit code: $ROLLBACK_STATUS). Manual recovery required!"
            exit 1
          else
            echo "Rollback successful. Running previous version."
          fi
        else
          echo "ERROR: :previous image not found.  Cannot rollback!"
          exit 1 # IMPORTANT: Exit with an error code to fail the workflow
        fi
      else
        echo "Deployment completed successfully."
      fi

